@inject DataProvider Data


<MudDialog>
    <DialogContent>
        <MudTimePicker Label="Estimated Leaving" @bind-Time="Leave" />
        <MudItem xs="12" sm="6" md="4">
            <MudAutocomplete T="Location" Label="From" ToStringFunc="@(Location => Location.Name)" @bind-Value="startLoc" SearchFunc="@SearchLoc"
                             ResetValueOnEmptyText="false"
                             CoerceText="false" CoerceValue="false"
                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
        </MudItem>

        <MudItem xs="12" sm="6" md="4">
            <MudAutocomplete T="Location" Label="To" ToStringFunc="@(Location => Location.Name)" @bind-Value="destinyLoc" SearchFunc="@SearchLoc"
                             ResetValueOnEmptyText="false"
                             CoerceText="false" CoerceValue="false"
                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
        </MudItem>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private Location destinyLoc, startLoc;
    TimeSpan? Leave = new TimeSpan(00, 45, 00);

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private async Task Submit()
    {
        // Check if the entries are != null
        if (!String.IsNullOrEmpty(startLoc.Latitude) &&
            !String.IsNullOrEmpty(startLoc.Longitude) &&
            !String.IsNullOrEmpty(startLoc.Name) &&
            !String.IsNullOrEmpty(destinyLoc.Latitude) &&
            !String.IsNullOrEmpty(destinyLoc.Longitude) &&
            !String.IsNullOrEmpty(destinyLoc.Name))
        {
            await Data.AddAreaAsync(Leave, startLoc, destinyLoc); // Save data
            MudDialog.Close(DialogResult.Ok(true));
        }else
        {
            await App.Current.MainPage.DisplayAlert("Error", "Please make sure you provided valid data.", "OK");
        }
        
    } 
    void Cancel() => MudDialog.Cancel();


    private async Task<IEnumerable<Location>> SearchLoc(string val)
    {
        Location[] Matches = null;
        if (String.IsNullOrEmpty(val) || val.Length < 3) //Start searching from 3+ Letters
        {
            return Matches;
        }
         Matches = Data.getLocations(val).Result;

        Matches = Matches.Distinct().ToArray(); // Remove Duplicates, every entry needs to be unique.
        return Matches.Where(x => x.Name.Contains(val, StringComparison.InvariantCultureIgnoreCase));
    }
}
